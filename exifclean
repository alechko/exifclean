#!/bin/bash
#
### by alechko [2015] https://github.com/alechko
#
# This is a super simple script to clean some of the Exif data from image using exiftool.
# You can get exiftool from here: http://owl.phy.queensu.ca/~phil/exiftool/
#
# Usage:
#   exifclean [-d|-D] FILENAME1 FILENAME2 ...
#
#   -d: delete with confirmation the original copy generated by exiftool
#   -D: force delete of the original copy generated by exiftool
#
# Setup:
#   Download the script (I use /home/user/bin) and add execute permissions.
#   Generate excludes file based on image:
#   For quick export of all tags and generate your own exclude file you can use:
#     exiftool -s FILENAME | awk '{ print $1 }' > exifclean_exclude
#   To see the full list of tags for your image you can use:
#     exiftool -a -g1 FILENAME
#   Remove tags you want to keep from the generated file and put that file into script folder.
#     (mv exifclean_eclude /home/user/bin/exifclean_exclude)
#
# TEST the script by copying your original image and run the script on the copy
#   cp FILENAME test.jpg; exifclean test.jpg
#
# Notes:
#  * I never use this on RAW files, only on the finalized versions exported from my raw editor,
#    I suggest you to do the same.
#  * exiftool will by default leave a copy of the image with format FILENAME_original,
#    if you didn't use the delete [-d|-D] flags, you can revert the changes by:
#      exiftool -restore_original FILENAME

# check if exiftool installed
exiftool -ver >/dev/null 2>&1 || {
  echo >&2 "exiftool required but it's not installed.  Aborting."; exit 1;
}

# fetch exclude tags list
SCRIPT_PATH=$(dirname `which $0`)
XCLD=$SCRIPT_PATH/exifclean_exclude
if [ ! -f $XCLD ]
then
    echo the exclude file does not exist, see inside the script for instructions; exit 1;
fi

# check if we have the delete flag, and set delete function
D=""
while getopts ":d:D:" opt; do
  case "$opt" in
    # require confirmation
    d) D="exiftool -delete_original "; shift ;;
    # force delete
    D) D="exiftool -delete_original! "; shift ;;
  esac
done

# check for files, skip the options
if [ -z "$1" ] || [[ $# == 1 && "$1" == -* ]]
  then
    echo "Usage: exifclean [-d|-D] FILENAME1 FILENAME2 ..."; exit 1;
fi

for f;
  do
    printf "(%s)" "$f";
    FILE=$f
    # check if file exists
    if [ ! -f $FILE ]
    then
        echo "the specified image does not exist"; continue
    fi

    # delete original tags (by default exiftool will keep the original image to FILE_original)
    exiftool -all= $FILE
    # build the tags exclude command based on exclude file
    X=""
    while read p;
      do
        X="$X -x $p";
      done < $XCLD
    # exiftool saved original file by default
    O=$FILE"_original"
    # dump tags from original to temp args file, excludes stripped
    exiftool -args --filename --directory --exiftoolversion $X $O > $FILE.args
    # import args into image - there are might be some errors/warnings for failed tags
    # I don't really care so I just shut'em down. We will see basic info from exiftool like "updated,"
    exiftool -q -q -m -@ $FILE.args $FILE;
    # delete the temp args file
    rm $FILE".args"
    # check if delete flag is on and execute deletion
    if [ ! -z "$D" ];
      then
        $D $FILE
      fi
done;

exit 1;